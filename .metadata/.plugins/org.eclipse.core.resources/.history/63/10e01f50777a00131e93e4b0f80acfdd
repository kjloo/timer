import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.Timer;


public class SevenSegmentDisplay extends JPanel implements ActionListener{
	
	//Animation variables
	private Timer t = new Timer(125, this);
	private boolean play = true;
	private int SIZE = 7;
	private int x = 0;
	private int[] y = new int[SIZE];
	private int[] f = new int[SIZE];
	private int velY = 3;
	private int width = 21;
	private int height = 7;
	private int spacing = 6 * width;
	
	//Create Segments
	private Rectangle segmentZero;
	private Rectangle segmentOne;
	private Rectangle segmentTwo;
	private Rectangle segmentThree;
	private Rectangle segmentFour;
	private Rectangle segmentFive;
	private Rectangle segmentSix;
	
	//Create Fill in Segments
	private Rectangle fillInSegmentZero;
	private Rectangle fillInSegmentOne;
	private Rectangle fillInSegmentTwo;
	private Rectangle fillInSegmentThree;
	private Rectangle fillInSegmentFour;
	private Rectangle fillInSegmentFive;
	private Rectangle fillInSegmentSix;
	
	//Color Constants
	private int R;
	private int G;
	private int B;
	
	//Byte Representation on 7-Segment Display
	private int zero = 0x3F;
	private int one = 0x06;
	private int two = 0x5B;
	private int three = 0x4F;
	private int four = 0x66;
	private int five = 0x6D;
	private int six = 0x7D;
	private int seven = 0x07;
	private int eight = 0x7F;
	private int nine = 0x6F;
	
	//Setup Number on Display
	private int num = zero;
	private int newPiece = num;
	private int oldPiece = num;
	
	public SevenSegmentDisplay() {
		createSegments();
		colorChange(Color.RED);
	}
	
	public SevenSegmentDisplay(int x, int y, int width, int height) {
		this.x = x;
		for(int i = 0; i < this.y.length; i ++)
			this.y[i] = y;
		this.width = width;
		this.height = height;
		this.spacing = 6 * width;
		createSegments();
		colorChange(Color.RED);
	}
	
	public void changeNumber(int num) {
		if(num == 0) {
			changeDisplay(zero);
		}else if(num == 1) {
			changeDisplay(one);
		}else if(num == 2) {
			changeDisplay(two);
		}else if(num == 3) {
			changeDisplay(three);
		}else if(num == 4) {
			changeDisplay(four);
		}else if(num == 5) {
			changeDisplay(five);
		}else if(num == 6) {
			changeDisplay(six);
		}else if(num == 7) {
			changeDisplay(seven);
		}else if(num == 8) {
			changeDisplay(eight);
		}else {
			changeDisplay(nine);	
		}
	}
	
	public void fallInNumber(int num) {
		if(num == 0) {
			newSegments(nine & ~zero);
		}else if(num == 1) {
			newSegments(zero & ~one);
		}else if(num == 2) {
			newSegments(one & ~two);
		}else if(num == 3) {
			newSegments(two & ~three);
		}else if(num == 4) {
			newSegments(three & ~four);
		}else if(num == 5) {
			newSegments(four & ~five);
		}else if(num == 6) {
			newSegments(five & ~six);
		}else if(num == 7) {
			newSegments(six & ~seven);
		}else if(num == 8) {
			newSegments(seven & ~eight);
		}else {
			newSegments(eight & ~nine);	
		}
	}
	
	public void fallOutNumber(int num) {
		if(num == 0) {
			oldSegments(~zero & one);
		}else if(num == 1) {
			oldSegments(~one & two);
		}else if(num == 2) {
			oldSegments(~two & three);
		}else if(num == 3) {
			oldSegments(~three & four);
		}else if(num == 4) {
			oldSegments(~four & five);
		}else if(num == 5) {
			oldSegments(~five & six);
		}else if(num == 6) {
			oldSegments(~six & seven);
		}else if(num == 7) {
			oldSegments(~seven & eight);
		}else if(num == 8) {
			oldSegments(~eight & nine);
		}else {
			oldSegments(~nine & zero);	
		}
	}
	
	private void changeDisplay(int num) {
		this.num = num;
		resetSegments();
		repaint();
	}
	
	private void newSegments(int piece) {
		this.newPiece = piece;
		repaint();
	}
	
	private void oldSegments(int piece) {
		this.oldPiece = piece;
		repaint();
	}
	
	private void createSegments() {
		this.segmentZero = new Rectangle(x + height, y[0] + spacing, width, height);
		this.segmentOne = new Rectangle(x + width + height, y[1] + height + spacing, height, width);
		this.segmentTwo = new Rectangle(x + width + height, y[2] + 2 * height + width + spacing, height, width);
		this.segmentThree = new Rectangle(x + height, y[3] + 2 * (height + width) + spacing, width, height);
		this.segmentFour = new Rectangle(x, y[4] + 2 * height + width + spacing, height, width);
		this.segmentFive = new Rectangle(x, y[5] + height + spacing, height, width);
		this.segmentSix = new Rectangle(x + height, y[6] + height + width + spacing, width, height);
		
		this.fillInSegmentZero = new Rectangle(x + height, f[0], width, height);
		this.fillInSegmentOne = new Rectangle(x + width + height, f[1] + height, height, width);
		this.fillInSegmentTwo = new Rectangle(x + width + height, f[2] + 2 * height + width, height, width);
		this.fillInSegmentThree = new Rectangle(x + height, f[3] + 2 * (height + width), width, height);
		this.fillInSegmentFour = new Rectangle(x, f[4] + 2 * height + width, height, width);
		this.fillInSegmentFive = new Rectangle(x, f[5] + height, height, width);
		this.fillInSegmentSix = new Rectangle(x + height, f[6] + height + width, width, height);
	}
	
	
	private void drawSegments(Graphics2D g2) {
		if((this.num & (0x01 << 0)) != 0)
			g2.fillRect(segmentZero.x, segmentZero.y, segmentZero.width, segmentZero.height);
		if((this.num & (0x01 << 1)) != 0)
			g2.fillRect(segmentOne.x, segmentOne.y, segmentOne.width, segmentOne.height);
		if((this.num & (0x01 << 2)) != 0)
			g2.fillRect(segmentTwo.x, segmentTwo.y, segmentTwo.width, segmentTwo.height);
		if((this.num & (0x01 << 3)) != 0)
			g2.fillRect(segmentThree.x, segmentThree.y, segmentThree.width, segmentThree.height);
		if((this.num & (0x01 << 4)) != 0)
			g2.fillRect(segmentFour.x, segmentFour.y, segmentFour.width, segmentFour.height);
		if((this.num & (0x01 << 5)) != 0)	
			g2.fillRect(segmentFive.x, segmentFive.y, segmentFive.width, segmentFive.height);
		if((this.num & (0x01 << 6)) != 0)
			g2.fillRect(segmentSix.x, segmentSix.y, segmentSix.width, segmentSix.height);
		
		if((this.piece & (0x01 << 0)) != 0)
			g2.fillRect(fillInSegmentZero.x, fillInSegmentZero.y, fillInSegmentZero.width, fillInSegmentZero.height);
		if((this.piece & (0x01 << 1)) != 0)
			g2.fillRect(fillInSegmentOne.x, fillInSegmentOne.y, fillInSegmentOne.width, fillInSegmentOne.height);
		if((this.piece & (0x01 << 2)) != 0)
			g2.fillRect(fillInSegmentTwo.x, fillInSegmentTwo.y, fillInSegmentTwo.width, fillInSegmentTwo.height);
		if((this.piece & (0x01 << 3)) != 0)
			g2.fillRect(fillInSegmentThree.x, fillInSegmentThree.y, fillInSegmentThree.width, fillInSegmentThree.height);
		if((this.piece & (0x01 << 4)) != 0)
			g2.fillRect(fillInSegmentFour.x, fillInSegmentFour.y, fillInSegmentFour.width, fillInSegmentFour.height);
		if((this.piece & (0x01 << 5)) != 0)	
			g2.fillRect(fillInSegmentFive.x, fillInSegmentFive.y, fillInSegmentFive.width, fillInSegmentFive.height);
		if((this.piece & (0x01 << 6)) != 0)
			g2.fillRect(fillInSegmentSix.x, fillInSegmentSix.y, fillInSegmentSix.width, fillInSegmentSix.height);
	}
	
	public void paint(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		g.setColor(new Color(R, G, B));
		createSegments();
		drawSegments(g2);
    }
	
	public void colorChange(Color color) {
		this.R = color.getRed();
		this.G = color.getGreen();
		this.B = color.getBlue();
	}

	public void actionPerformed(ActionEvent e) {
		if(play) {
			for(int i = 0; i < y.length; i++) {
				y[i] += (~num & (0x01 << i)) >> i;
				f[i] += (piece & (0x01 << i)) >> i;
			}
		}
		repaint();
	}
	
	private void resetSegments(){
		for(int i = 0; i < y.length; i++) 
			this.y[i] = 0;
		for(int i = 0; i < f.length; i++) 
			this.f[i] = 0;
	}
	
	public void setPlay(boolean play) {
		this.play = play;
		if(play)
			t.start();
		else
			t.stop();
	}

}
