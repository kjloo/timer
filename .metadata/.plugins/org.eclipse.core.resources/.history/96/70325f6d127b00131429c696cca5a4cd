import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import net.miginfocom.swing.MigLayout;


public class TimerWindow extends JFrame{
	
	//Create Constants
	private int SECOND = 1000;
	
	//Create Alarm
	Alarm alarm;
	String filename = "Siren.wav";
	
	//Create Clock
	ClockPanel clock = new ClockPanel();
	
	//Create GUI Objects
	private SettingsPanel settings;
	private JButton setButton;
	private JButton startButton;
	private JButton stopButton;
	private JButton dismissButton;
	private JButton resetButton;
	private JButton closeButton;
	
	public TimerWindow() {
		//Setup Variables
		settings = new SettingsPanel(this);
		
		//Settings
		setVisible(true);
		setTitle("Segment Timer");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setMinimumSize(new Dimension(800, 800));
		setSize(800, 800);
		setBackground(Color.BLACK);
		setResizable(true);
		
		//Setup Alarm
		alarm = new Alarm(filename);
		
		//Setup GUI Objects;
		//Create Panel
		JPanel panel = new JPanel();
		//Create Buttons
		setButton = new JButton("Set");
		setButton.setEnabled(false);
		setButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				setTime(evt);
			}
		});
		
		startButton = new JButton("Start");
		startButton.setBackground(Color.GREEN);
		startButton.setEnabled(false);
		startButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				startClock(evt);
			}
		});
		
		stopButton = new JButton("Stop");
		stopButton.setBackground(Color.RED);
		stopButton.setEnabled(false);
		stopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				stopClock(evt);
			}
		});
		
		dismissButton = new JButton("Dismiss");
		dismissButton.setEnabled(false);
		dismissButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				stopAlarm(evt);
			}
		});
		
		resetButton = new JButton("Reset");
		resetButton.setEnabled(false);
		resetButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				resetClock(evt);
			}
		});
		
		closeButton = new JButton("Close");
		closeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				dispose();
			}
		});
		
		
		
		//Set Layout
		setLayout(new MigLayout("", "[grow] []", "[grow] [] []"));
		add(clock, "grow, wrap");
		add(settings, "wrap");
		panel.setLayout(new MigLayout("wrap 3"));
		panel.add(setButton, "grow");
		panel.add(startButton, "grow");
		panel.add(stopButton, "grow, wrap");
		panel.add(dismissButton, "grow");
		panel.add(resetButton, "grow");
		panel.add(closeButton, "wrap");
		add(panel, "wrap");

		
	}
	
	public void setDisplay() {
		clock.setDisplay(settings.getSeconds(), settings.getMinutes(), settings.getHours(), settings.getDays());
	}
	
	public void updateDisplay() {
		clock.updateDisplay(settings.getSeconds(), settings.getMinutes(), settings.getHours(), settings.getDays());
	}
	
	private void countDown() {
		while(stopButton.isEnabled()) {
			settings.countDown();
			if(settings.getDays() + settings.getHours() + settings.getMinutes() + settings.getSeconds() == 0) {
				stopButton.setEnabled(false);
				playSound();
			}
			SwingUtilities.invokeLater(new Runnable() {
			    public void run() {
			        updateDisplay();
			    }
			});
			try {
				Thread.sleep(SECOND);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	private void playSound() {
    	dismissButton.setEnabled(true);
    	alarm.play();
	}
	
	private void stopAlarm(ActionEvent evt) {
		dismissButton.setEnabled(false);
		disableButtons();
		alarm.stop();
	}
	
	//Action Function
	public void checkFields(boolean valid) {
		setButton.setEnabled(valid);	
	}
	
	public void setTime(ActionEvent evt) {
		settings.setTime();
		startButton.setEnabled(settings.getDays() + settings.getHours() + settings.getMinutes() + settings.getSeconds() != 0);
		setDisplay();
	}
	
	private void changeEnabled(Boolean enable) {
		setButton.setEnabled(enable);
		startButton.setEnabled(enable);
		stopButton.setEnabled(!enable);
		resetButton.setEnabled(!enable);
		settings.changeEnabled(enable);
		closeButton.setEnabled(enable);
	}
	
	private void disableButtons() {
		setButton.setEnabled(false);
		startButton.setEnabled(false);
		stopButton.setEnabled(false);
		resetButton.setEnabled(false);
		dismissButton.setEnabled(false);
		settings.changeEnabled(true);
	}
	
	private void startClock(ActionEvent evt) {
		changeEnabled(false);
		setPlay(true);
		//Start Countdown
		new Thread(new Runnable() {
			public void run() {
				countDown();	
			}
		}).start();
	}
	
	private void stopClock(ActionEvent evt) {
		changeEnabled(true);
		setPlay(false);
	}
	
	private void resetClock(ActionEvent evt) {
		changeEnabled(true);
		setPlay(false);
		settings.setTime();
		setDisplay();
	}
	
	public void setPlay(boolean play) {
		clock.setPlay(play);
	}

}
